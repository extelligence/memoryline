■コンセプトアイデア
1.オートコンプリート
⇒実現！
2.「部分から全体を想起する」記憶特性の利便性実験サイト。
3.2つ、もしくは3つのテキストをつなげる構造を持つ。
⇒実現！
4.vim-snippetのような入力と出力のフィードバック。
5.フロー(日々の作業)をストック(自分の知識資産)に変えられるシステム。

■ドメインアイデア
memorystream.com
memorygrid.com
thinkstream.com
thinkgrid.com
memory-stream.com
memory-grid.com
think-stream.com
think-grid.com

■その他のアイデア
・複数行一括入力

■アプリケーションを開発する前にやること
▼アプリケーション(コード)名
memoryline

▼プロジェクトロードマップの作成
　・「いつまでに」「どういう状態」になっているか決める。
1月中にリリース。

▼UI設計
　　　　　　横幅:固定(720～960Pixel)　リキッド
　グローバルナビ:なし
　コンテンツナビ:なし
　　　　カラム数:2カラム
　　　サイドバー:有
　サイドバー位置:右

▼画面遷移図の作成
　画面数:

▼URL設計
　コントローラの抽出

▼データベース設計
　テーブル数の抽出

▼利用技術の検討
　・OpenID
　・検索(Ferret)
　・携帯対応(jpmobile)

▼グラフィックデザインイメージ
　▼配色
　　メイン:
　　　サブ:
　　　背景:
　▼質感
　　しっかり、丸い

■アプリケーション開発の開始
1. config/database.yml を設定する。

2. データベースの作成
mysql -u root -p
mysql>create database データベース名;

mysqladmin -u root -p create データベース名　でもOK。

3. アプリケーション用の一般ユーザーを作成
GRANT ALL ON データベース名.* TO ユーザー名@localhost IDENTIFIED BY 'パスワード';
FLUSH PRIVILEGES;

  ▼ユーザー権限の確認
  show grants for ユーザー名@localhost;
  
  ▼ユーザー権限の削除
  REVOKE ALL ON データベース名.* FROM ユーザー名@localhost;

4. rake db:migrate を実行する。

5. script/server を実行する。

■ユーザーのユースケース
・覚えたいことを登録できる。
・一度登録したことは、テキストボックスに文字列を部分入力することで、全体像を思い出すことができる。
・

■ドメイン名
memoryline.info

■作業記録
12/28　ドメイン取得。memoryline.info
12/30　ブログライクなバージョンが完成。
これでは面白くないので、これはタグとして保存しコンセプトをつめていく。
http://thinkkey.com/svn/memoryline/tags/blog1
まずはオートコンプリートの有効性を高めるため、入力項目は１つのテキストボックスとすることで、アイデアの実現を行う。
入力文字数制限などの制約があるが、全角で約50文字は入力が可能。1センテンス毎のフィードバックができるようにする。まさしくライン。
上記実現後、情報毎の連携方法を実現する。
微妙な仕様だけどやってみたら、どんな体験ができるだろう。

やってみた。1行しか入力できないのに1度入力したことがあるものならすぐに出てくるのはなんか良い。こっちの方がすごくしっくりくる。1行しか入力できないのに！

suggest.jsを使って、オートコンプリート機能を改修。
IME中の候補出力にも対応し、組み込みも簡単。これはいいね！
http://www.enjoyxstudy.com/javascript/suggest/

テキストボックスを２つにした。
12/31 acts_as_graphを使って、グラフ構造を実装。
01/11 インタラクションのフィードバック機能を設計する必要がある。
何らかの自動リンク機能が必要。
▼システムの流れ
1.新しいノードの追加
2.既存ノードと全てに双方向リンクを生成
　⇒データ数が100の状態において、ノードを追加した場合、インタラクションの追加
　数は200必要になる。オーダーが大きすぎる問題。RDBからKVSへの変更もあり？
3.重み付け処理関数の呼び出し
　⇒重み付けルール定義が必要になる。edgesテーブルにコスト用カラムの追加。
4.リンク再計算
5.バッチにて不要リンクの削除。


■技術的な課題
【完了】同一カラムに対する複数のテキストボックスもしくは、テキストエリアのフォーム作成方法
　⇒　やり方はRailsレシピブックに書いてある。
【完了】textareaでのオートコンプリート実装方法
　⇒ suggest.jsを使って、textareaでもオートコンプリートが利用できるのを確認。
×もしくは、input type=text での複数行表示方法
　⇒　これは原理的に無理そう。
【完了】タイトル(ラベル)とコンテンツ、タグの情報形式にするか、コンテンツはすべて並列にしてリンク構造を使って、タイトル、コンテンツ、タグの関係を表現するか迷う。⇒すべて並列のグラフ構造。
【完了】オートコンプリートの完全な実装
　⇒　suggest.js が無難か。
○テキストエリアの自動リサイズ
⇒ライブラリがある。
